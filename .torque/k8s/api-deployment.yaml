# Namespace for AyvCodr application
apiVersion: v1
kind: Namespace
metadata:
  name: ayvcodr
  labels:
    name: ayvcodr
    app.kubernetes.io/name: ayvcodr
    app.kubernetes.io/component: namespace
---
# Secret for database credentials
apiVersion: v1
kind: Secret
metadata:
  name: ayvcodr-db-secret
  namespace: ayvcodr
type: Opaque
data:
  # These will be base64 encoded values
  # In practice, these should be populated from AWS Secrets Manager
  DB_HOST: ""
  DB_NAME: ""
  DB_USER: ""
  DB_PASSWORD: ""
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: ayvcodr-config
  namespace: ayvcodr
data:
  ENVIRONMENT: "kubernetes"
  LOG_LEVEL: "INFO"
  # Add other non-sensitive configuration here
---
# ServiceAccount for AyvCodr application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ayvcodr-service-account
  namespace: ayvcodr
  labels:
    app.kubernetes.io/name: ayvcodr
    app.kubernetes.io/component: service-account
  annotations:
    # This will be populated with the IAM role ARN for IRSA
    eks.amazonaws.com/role-arn: ""
---
# Deployment for AyvCodr FastAPI application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ayvcodr-api
  namespace: ayvcodr
  labels:
    app.kubernetes.io/name: ayvcodr
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: ayvcodr
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ayvcodr
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ayvcodr-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: ayvcodr-api
        image: ayvcodr:latest  # This will be updated during deployment
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: PORT
          value: "8000"
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: ayvcodr-db-secret
              key: DB_HOST
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: ayvcodr-db-secret
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: ayvcodr-db-secret
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ayvcodr-db-secret
              key: DB_PASSWORD
        envFrom:
        - configMapRef:
            name: ayvcodr-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-run
          mountPath: /var/run
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-run
        emptyDir: {}
      tolerations:
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "amd64"
        effect: "NoSchedule"
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ayvcodr-api-hpa
  namespace: ayvcodr
  labels:
    app.kubernetes.io/name: ayvcodr
    app.kubernetes.io/component: hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ayvcodr-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
# Service for AyvCodr API
apiVersion: v1
kind: Service
metadata:
  name: ayvcodr-api-service
  namespace: ayvcodr
  labels:
    app.kubernetes.io/name: ayvcodr
    app.kubernetes.io/component: service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: ayvcodr
    app.kubernetes.io/component: api
---
# Ingress for AyvCodr API (using AWS Load Balancer Controller)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ayvcodr-api-ingress
  namespace: ayvcodr
  labels:
    app.kubernetes.io/name: ayvcodr
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
    alb.ingress.kubernetes.io/success-codes: '200'
    # Certificate ARN will be populated during deployment
    # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:region:account:certificate/cert-id
    alb.ingress.kubernetes.io/wafv2-acl-arn: ""  # WAF ARN will be populated
    alb.ingress.kubernetes.io/group.name: ayvcodr
    alb.ingress.kubernetes.io/load-balancer-name: ayvcodr-alb
spec:
  rules:
  - host: api.ayvcodr.com  # This will be updated during deployment
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ayvcodr-api-service
            port:
              number: 80